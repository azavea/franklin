Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  rdsDBName:
    Type: String
    Description: The name of the initial database to be created in the DB cluster.
    Default: franklin

Resources:
  # Subnet group to control where the DB gets placed
  rdsDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora cluster.
      SubnetIds:
        !Split [',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' }]
  # Security group to add the DB to the VPC,
  # and to allow the Fargate containers to talk to DB
  rdsSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your workload to access the DB cluster'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'The Security Group for ${Name} to access DB cluster.'
      VpcId:
        Fn::ImportValue:
          !Sub '${App}-${Env}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-${Name}-Aurora'
  rdsDBClusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your DB cluster'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the database cluster.
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: !Sub 'From the Aurora Security Group of the workload ${Name}.'
          SourceSecurityGroupId: !Ref rdsSecurityGroup
      VpcId:
        Fn::ImportValue:
          !Sub '${App}-${Env}-VpcId'
  # Generate secrets for DB
  rdsDBSecrets:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
  # The DB cluster itself
  rdsDBCluster:
    Metadata:
      'aws:copilot:description': 'DB cluster'
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 256
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 7
      DBInstanceClass: 'db.r4.large'
      DBInstanceIdentifier: !Sub '${rdsDBName}-production'
      DBName: !Ref rdsDBName
      DBSubnetGroupName: !Ref rdsDBSubnetGroup
      DeletionProtection: false
      Engine: 'postgres'
      EngineVersion: '12.7'
      MasterUsername: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref rdsDBSecrets, ":SecretString:username}}" ]]
      MasterUserPassword: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref rdsDBSecrets, ":SecretString:password}}" ]]
      MultiAZ: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref rdsDBClusterSecurityGroup
  # The final link between a Secrets Manager secret and the associated database
  rdsSecretDBAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref rdsDBSecrets
      TargetId: !Ref rdsDBCluster
      TargetType: AWS::RDS::DBInstance
Outputs:
  rdsDBSecrets: # injected as APICLUSTER_SECRET environment variable by Copilot.
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'port', 'dbname', 'username', 'password', 'dbClusterIdentifier' and 'engine'"
    Value: !Ref rdsDBSecrets
  rdsSecurityGroup:
    Description: "The security group to attach to the workload."
    Value: !Ref rdsSecurityGroup
  dbName:
    Description: "The DB_NAME exported as env var for the API container"
    Value: !Join ["", ['{{resolve:secretsmanager:', !Ref rdsDBSecrets, ":SecretString:dbname}}"]]
  dbHost:
      Description: "The DB_HOST exported as env var for the API container"
      Value: !Join ["", ['{{resolve:secretsmanager:', !Ref rdsDBSecrets, ":SecretString:host}}"]]
  dbUser:
      Description: "The DB_USER exported as env var for the API container"
      Value: !Join ["", ['{{resolve:secretsmanager:', !Ref rdsDBSecrets, ":SecretString:username}}"]]
  dbPassword:
      Description: "The DB_PASSWORD exported as env var for the API container"
      Value: !Join ["", ['{{resolve:secretsmanager:', !Ref rdsDBSecrets, ":SecretString:password}}"]]